name: Create Release

on:
  push:
    tags-ignore:
      - t*

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x.x'
      - name: Restore dependencies
        run: dotnet restore
      - name: Download Dalamud
        run: |
          Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -OutFile latest.zip
          Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev"
      - name: Build
        run: |
          $ver = '${{ github.ref }}' -replace 'refs/tags/',''
          invoke-expression 'dotnet build --no-restore --configuration Release --nologo -p:Version=$ver -p:FileVersion=$ver -p:AssemblyVersion=$ver'
      - name: Archive
        run: Compress-Archive -Path GatheringOptimizer/bin/Release/* -DestinationPath GatheringOptimizer.zip
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          path: |
            ./GatheringOptimizer/bin/Release/*
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: GatheringOptimizer ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./GatheringOptimizer.zip
          asset_name: GatheringOptimizer.zip
          asset_content_type: application/zip

      - name: Fetch main branch
        run: |
          git config --global user.name "Actions User"
          git config --global user.email "actions@github.com"
          git fetch origin main
          git checkout main

      - name: Write out repo.json
        run: |
          $ver = '${{ github.ref }}' -replace 'refs/tags/',''
          $path = './repo.json'
          $content = get-content -path $path
          $content = $content -replace '"AssemblyVersion": "[0-9.]*"',('"AssemblyVersion": "' + $ver + '"')
          $content = $content -replace '/download/[0-9.]*/',('/download/' + $ver + '/')
          set-content -Path $path -Value $content

      - name: Commit repo.json
        run: |
          git config --global user.name "Actions User"
          git config --global user.email "actions@github.com"
          git add repo.json
          git commit -m "[CI] Updating repo.json for ${{ github.ref }}" || true
          git push origin main
